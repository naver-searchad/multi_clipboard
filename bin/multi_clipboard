#!/bin/bash

# Multi Clipboard for GNU screen!
# *** Utility to keep multiple clipboards ***
# *** and manage screen's clipboard.      ***

usage="
Usage:

  $ multi_clipboard -i [args]
  # Push [args]to the clipboard list

  $ multi_clipboard -I
  # Push the screen's clipboard to the clipboard list

  $ multi_clipboard -o
  # Will show the clipboard list, then select one, which will be placed
  # the top of the clipboard list.

  $ multi_clipboard -O # (or w/o any other options)
  # Same as -o, in addition, sent it to the screen's clipboard

  $ multi_clipboard -s [args]
  # Send [args] to the screen's clipboard

  $ multi_clipboard -x
  # Send the last clipboard to the clipboard of OS (X server)
  # Even if CLX is not set, it uses CLXOS, is available

  $ multi_clipboard -c
  # Clean up clipboard file

  $ multi_clipboard -h
  # Show this usage
"

# Settings for screen {{{
#
# To use in screen, put this script where
# PATH is set , and write in .screenrc:
#
# ----------.screenrc---------
# bufferfile "$SCREENEXCHANGE" # SCREENEXCHANGE must be set in .bashrc !!!
# bindkey -m ' ' eval 'stuff \040' 'writebuf' 'exec !!! multi_clipboard -I'
# bindkey -m Y eval 'stuff Y' 'writebuf' 'exec !!! multi_clipboard -I'
# bindkey -m W eval 'stuff W' 'writebuf' 'exec !!! multi_clipboard -I'
# bind a eval 'command -c mc' "!bash -c 'multi_clipboard -S'"
# bind ^a eval 'command -c mc' "!bash -c 'multi_clipboard -S'"
# bind -c mc n eval 'command -c mc' "!bash -c 'multi_clipboard -S -n'"
# bind -c mc p eval 'command -c mc' "!bash -c 'multi_clipboard -S -p'"
# bind -c mc q eval "!bash -c 'multi_clipboard -S -q'"
# bind -c mc ' ' eval "!bash -c 'multi_clipboard -S -s'"
# ----------.screenrc---------
#
# These settings enable that a clipboard copied by SPACE, Y and  W
# in the copy mode will be sent to the clipboard list.
# If CLX is set, it is also sent to the OS's (X server's) clipboard.
#
# C-a a (C-a) can be used to select a clipboard from the list,
# instead of using multi_clipboard -O.
# Once you input C-a a, current clipboard is shown in the message line like:
#
#     0: current_clipboard
#
# You can choose next and previous candidate by n and p, respectively.
# Use space to select a shown clipbaord.
# Use q to quit.
#
# And set environmental variables in .bashrc
# ----------.bashrc---------
# export SCREENEXCHANGE=$HOME/.screen-exchange
# export SCREEN_MSGMINWAIT=1
# export CLIPBOARD=$HOME/.clipboard
# export CLMAXHIST=20
# export CLSEP="" # "" was inserted with "C-v C-g", use bell as a separator
# export CLX="" #xsel/xclip
# if [[ "$OSTYPE" =~ "linux" ]];then
#   if which -s xsel;then
#     export CLXOS="xsel"
#   elif which -s xsel;then
#     export CLXOS="xclip"
#   fi
# elif [[ "$OSTYPE" =~ "cygwin" ]];then
#   if which -s putclip;then
#     export CLXOS="putclip"
#   elif which -s xsel;then
#     export CLXOS="xsel"
#   elif which -s xsel;then
#     export CLXOS="xclip"
#   fi
# elif [[ "$OSTYPE" =~ "darwin" ]];then
#   if which -s pbcopy;then
#     export CLXOS="pbcopy"
#   fi
# fi
# ----------.bashrc---------
#
#
# Note 1): SCREENEXCHANGE must be set in .bashrc
#          or you must remove the bufferfile definition line from .screenrc
#          In the later case, /tmp/screen-exchange will be used.
#
# Note 2): SCREEN_MSGMINWAIT is used to revert msgminwait in screen
#          because multi_clipboard temporally change it to 0.
#          Default value in both screen and multi_clipboard is 1.
#          Therefore, you don't need to set SCREEN_MSGMINWAIT
#          unless you set msgminwait in .screenrc.
# }}}

# Set valuse {{{
# Following variables can be set in .bashrc or else
#
# CLIPBOARD, SCREENEXCHANGE, CLMAXHIST, CLX, CLXOS, CLSEP
# (Refer default values below)

# File to keep clipboards
clb=${CLIPBOARD:-$HOME/.clipboard}
touch $clb

# File for screen's clipboard
scex=${SCREENEXCHANGE:-/tmp/screen-exchange}
touch $scex

# Max number of clipboards to keep
max=${CLMAXHIST:-10}

# Application to sent the clipboard to the OS's clipboard
# If blank, don't copy the clipboard to the OS's clipboard
# other than when "-x" is given
clx=${CLX:-""}

# Application to sent the clipboard to the OS's clipboard
# to be used for "-x" option
if [ "$CLXOS" != "" ];then
  clxos=${CLXOS}
elif [[ "$OSTYPE" =~ "linux" ]];then
  if which xsel >/dev/null 2>&1;then
    clxos="xsel"
  elif which xsel >/dev/null 2>&1;then
    clxos="xclip"
  fi
elif [[ "$OSTYPE" =~ "cygwin" ]];then
  if which putclip >/dev/null 2>&1;then
    clxos="putclip"
  elif which xsel >/dev/null 2>&1;then
    clxos="xsel"
  elif which xsel >/dev/null 2>&1;then
    clxos="xclip"
  fi
elif [[ "$OSTYPE" =~ "darwin" ]];then
  if which pbcopy >/dev/null 2>&1;then
    clxos="pbcopy"
  fi
fi

# Separator of clipboards in the file
cls="${CLSEP:-}"

# Default msgminwait
msgminwait="${SCREEN_MSGMINWAIT:-1}"

# }}}

function mcpush { # {{{
  # Set input
  local input="$*"

  # Ignore blank
  if [ "$*" = "" ];then
    return
  fi

  # Get old words
  local orig_ifs=$IFS
  IFS="$cls"
  local clbs=(`cat $clb`)
  IFS=$orig_ifs
  local nclbs=${#clbs[*]}

  # Renew words
  local i=0
  local j=1
  echo -en "$input$cls" > $clb
  while [ $i -lt $nclbs ] && [ $j -lt $max ] ;do
    local iuse=$i
    ((i++))

    #echo "try $iuse, ${clbs[$iuse]}"
    # Remove duplications
    if [ "$input" = "${clbs[$iuse]}" ];then
      #echo
      #echo "$iuse      : no use"
      #echo "\$\*    : $input"
      #echo "clbs[$iuse]: ${clbs[$iuse]}"
      continue
    fi
    echo -en "${clbs[$iuse]}$cls" >> $clb
    j=$((j+1))
  done

  # Copy to clipboard of X
  if [ "$clx" != "" ];then
    echo -en "$*" | $clx
  fi
} # }}}

function mcpushsc { # {{{
  mcpush "$(cat $scex)"
} # }}}

function mcpop { # {{{
  ## Show stored words
  local orig_ifs=$IFS
  IFS="$cls"
  local clbs=(`cat $clb`)
  IFS=$orig_ifs
  local nclbs=${#clbs[*]}
  local i=$((nclbs-1))
  echo
  while [ $i -ge 0 ];do
    if [ $(echo "${clbs[$i]}"|wc -l) -ge 3 ];then
      local clbshow="$(echo "${clbs[$i]}"|head -n2)
..."
    else
      local clbshow="${clbs[$i]}"
    fi
    # %%/\\ is reduced to %/\ during the conversions
    # \e\" makes problem (stop the output), then \ must be conveted to the output
    # `\\` is converted to one \ for the real clipboard, too, to be fixed.
    local clbshow=$(echo "$clbshow" |perl -pe 's/\n/\n    /g' |perl -pe 's/    $//g' |perl -pe 's/%/%%/g'|perl -pe 's/\\/\\\\/g')
    printf "%2d: $clbshow\n" $((i+1))
    ((i--))
  done

  # Check a number of clipboards
  if [ $nclbs -eq 0 ];then
    printf "No clipboards in $clb\n\n"
    return
  fi

  # Choose buffer
  printf "\nchoose buffer: "
  read n
  if [ "$n" = "q" ];then
    return 0
  fi
  if ! echo $n|grep -q "^[1-9][0-9]*$" || [ "$n" -gt "$nclbs" ];then
    echo "$f is not valid"
    echo "Enter [1-$((nclbs))] or q (to quit)"
    return 1
  fi
  # Subtract one to adjust for the array
  ((n--))
  local c="${clbs[$n]}"

  # Align clipboards
  echo -en "$c$cls" > $clb
  i=0
  while [ $i -lt $nclbs ];do
    if [ ! $i -eq $n ];then
      echo -en "${clbs[$i]}$cls" >> $clb
    fi
    ((i++))
  done

  # Copy to clipboard of X
  if [ "$clx" ];then
    echo -en "$c" | $clx
  fi
} # }}}

function mcpoponsc_messaage { # {{{
  # Note: Message line can show only 512 characters.
  # If more than 512 characters were given to the message line,
  # the message can't be correctly shown (and overflows will appear in the window)
  #printf "\e^n/p(next/prev) q(quit) Space(select) %2d: $clbshow\e\\" $mcpoponsc_n
  screen -X echo '$mcpoponsc_n/$mcpoponsc_nclbs: $mcpoponsc_clb_'$((mcpoponsc_n-1))
} # }}}

function mcpoponsc { # {{{
  screen -X msgminwait 0
  ## Get stored words
  local orig_ifs=$IFS
  IFS="$cls"
  mcpoponsc_clbs=(`cat $clb`)
  IFS=$orig_ifs
  local mcpoponsc_nclbs=${#mcpoponsc_clbs[*]}

  # Check a number of clipboards
  if [ $mcpoponsc_nclbs -eq 0 ];then
    printf "\eNo clipboards in $clb\e\\"
    return
  fi

  screen -X setenv mcpoponsc_nclbs $mcpoponsc_nclbs
  for ((i=0;i<$mcpoponsc_nclbs;i++));do
    if [ ${#mcpoponsc_clbs[$i]} -gt 100 ];then
      local clbshow=${mcpoponsc_clbs[$i]: 0: 100}...
    else
      local clbshow=${mcpoponsc_clbs[$i]}
    fi
    screen -X setenv mcpoponsc_clb_$i $clbshow
  done

  # mcpoponsc_n starts from 1
  # It is better to use same number for pringing in mcpoponsc_messaage,
  # because setenv command also show a message in a short time.
  # If they are different, there will be ugly flash.
  mcpoponsc_n=1
  screen -X setenv mcpoponsc_n $mcpoponsc_n
  mcpoponsc_messaage
  screen -X msgminwait $msgminwait
} # }}}

function mcpoponsc_next { # {{{
  screen -X msgminwait 0
  local mcpoponsc_n=$(screen -Q echo '$mcpoponsc_n')
  local mcpoponsc_nclbs=$(screen -Q echo '$mcpoponsc_nclbs')
  if [ $mcpoponsc_n -eq 1 ];then
    mcpoponsc_n=$((mcpoponsc_nclbs))
  else
    ((mcpoponsc_n--))
  fi
  screen -X setenv mcpoponsc_n $mcpoponsc_n
  mcpoponsc_messaage
  screen -X msgminwait $msgminwait
} # }}}

function mcpoponsc_prev { # {{{
  screen -X msgminwait 0
  local mcpoponsc_n=$(screen -Q echo '$mcpoponsc_n')
  local mcpoponsc_nclbs=$(screen -Q echo '$mcpoponsc_nclbs')
  if [ $mcpoponsc_n -eq $((mcpoponsc_nclbs)) ];then
    mcpoponsc_n=1
  else
    ((mcpoponsc_n++))
  fi
  screen -X setenv mcpoponsc_n $mcpoponsc_n
  mcpoponsc_messaage
  screen -X msgminwait $msgminwait
} # }}}

function mcpoponsc_quit { # {{{
  screen -X msgminwait 0
  for ((i=0;i<$(screen -Q echo '$mcpoponsc_nclbs');i++));do
    screen -X unsetenv mcpoponsc_clb_$i
  done
  screen -X unsetenv mcpoponsc_n
  screen -X unsetenv mcpoponsc_nclbs
  screen -X msgminwait $msgminwait
} # }}}

function mcpoponsc_select { # {{{
  screen -X msgminwait 0
  ## Get stored words
  local orig_ifs=$IFS
  IFS="$cls"
  mcpoponsc_clbs=(`cat $clb`)
  IFS=$orig_ifs
  local mcpoponsc_nclbs=${#mcpoponsc_clbs[*]}

  mcpoponsc_n=$(screen -Q echo '$mcpoponsc_n')
  local n=$((mcpoponsc_n-1))
  local c="${mcpoponsc_clbs[$n]}"

  # Align clipboards
  echo -en "$c$cls" > $clb
  i=0
  while [ $i -lt $mcpoponsc_nclbs ];do
    if [ ! $i -eq $n ];then
      echo -en "${mcpoponsc_clbs[$i]}$cls" >> $clb
    fi
    ((i++))
  done

  # Copy to clipboard of X
  if [ "$clx" ];then
    echo -en "$c" | $clx
  fi

  mcpopsc
  mcpoponsc_quit
  screen -X msgminwait $msgminwait
} # }}}

function mcpopsc { # {{{
  local orig_ifs=$IFS
  IFS="$cls"
  local clbs=(`cat $clb`)
  IFS=$orig_ifs
  echo -en "${clbs[0]}" > $scex
  screen -X readbuf
  printf "\e^${clbs[0]}\e\\"
} # }}}

function mcpushx { # {{{
  clx=${clx:-${clxos}}
  if [ ! "$clx" ];then
    echo "No clip board application is assigned!"
    return
  fi
  local orig_ifs=$IFS
  IFS="$cls"
  local clbs=(`cat $clb`)
  IFS=$orig_ifs
  echo -en "${clbs[0]}" | $clx
} # }}}

# Check arguments and execute commands{{{
if [ "$1" = "-h" ];then
  echo "$usage"
elif [ "$1" = "-s" ];then
  # pushpopsc
  shift
  mcpush "$*"
  mcpopsc
elif [ "$1" = "-S" ];then
  # poponsc
  shift
  if [ "$1" = "" ];then
    mcpoponsc
  elif [ "$1" = "-n" ];then
    mcpoponsc_next
  elif [ "$1" = "-p" ];then
    mcpoponsc_prev
  elif [ "$1" = "-s" ];then
    mcpoponsc_select
  elif [ "$1" = "-q" ];then
    mcpoponsc_quit
  fi
  shift
elif [ "$1" = "-x" ];then
  # pushpopsc
  shift
  mcpushx
elif [ "$1" = "-i" ];then
  # push
  shift
  mcpush "$*"
elif [ "$1" = "-I" ];then
  # pushsc
  shift
  mcpushsc
elif [ "$1" = "-c" ];then
  # cleanup store file
  echo "echo > $clb"
  echo > $clb
elif [ "$1" = "-o" ];then
  # pop
  shift
  mcpop
else # -O or else
  # popsc
  mcpop
  ret=$?
  if [ $ret -ne 0 ];then
    exit $ret
  fi
  mcpopsc
fi # }}}
